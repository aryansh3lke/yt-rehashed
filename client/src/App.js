import './App.css';
import React, { useState } from 'react';

// Access Vercel environment variable in production to reach deployed backend server
const PROXY_URL = process.env.REACT_APP_PROXY_URL || 'http://localhost:8000';

function App() {
  const [inputLink, setLink] = useState("");
  const [videoId, setVideoId] = useState("");
  const [videoTitle, setVideoTitle] = useState("");
  const [comments, setComments] = useState([]);
  const [transcriptSummary, setTranscriptSummary] = useState("");
  const [commentSummary, setCommentSummary] = useState("");
  
  const [summaryLoader, setSummaryLoader] = useState(false);

  const [downloadModal, setDownloadModal] = useState(false);
  const [downloadLoader, setDownloadLoader] = useState(false);
  const [downloadResolutions, setDownloadResolutions] = useState(null);
  const [selectedResolution, setSelectedResolution] = useState("");


  /**
  * Generate summaries for a YouTube video based on the provided URL.
  *
  * This function is triggered by clicking the submit button for the link form. 
  * It fetches summaries from the server generated by ChatGPT and updates state
  * hooks with the fetched data.
  */
  const generateSummaries = async (e) => {
    e.preventDefault();
    const videoUrl = inputLink;

    // clear relevant state hooks
    setLink("");
    setVideoId("");
    setVideoTitle("");
    setComments("")
    setTranscriptSummary("");
    setCommentSummary("");
    setDownloadResolutions("");
    setSelectedResolution("");
    setSummaryLoader(true);

    fetch(PROXY_URL + `/api/get-summaries?video_url=${videoUrl}`)
      .then(response => response.json()
      .then(data => ({ status: response.status, body: data })))
      .then(({ status, body }) => {
        if (status === 504) {
          throw new Error('The summarizer is currently down. Please try again later.');
        } else if (status !== 200) {
          throw new Error(body.error);
        }

        // initalize relevant state hooks
        setSummaryLoader(false);
        setVideoId(body.video_id);
        setVideoTitle(body.video_title);
        setComments(body.comments);
        setTranscriptSummary(body.transcript_summary);
        setCommentSummary(body.comments_summary);
      })
      .catch(error => {
        setSummaryLoader(false);
        window.alert(error.message);
      });
  };

  /**
  * Display the available resolutions to download for the given YouTube video.
  *
  * This function is triggered by opening up the download modal for the first
  * time for the current video. It fetches the resolutions from the server
  * based on the video streams that are available through YouTube.
  */
  const displayResolutions = async (e) => {
    e.preventDefault();

    if (!downloadResolutions) {
      // update downloader state hooks
      setDownloadModal(true);
      setDownloadLoader(true);
      setDownloadResolutions([]);
  
      fetch(PROXY_URL + `/api/get-resolutions?video_id=${videoId}`)
        .then(response => response.json()
        .then(data => ({ status: response.status, body: data })))
        .then(({ status, body }) => {
          if (status === 504) {
            throw new Error('The summarizer is currently down. Please try again later.');
          } else if (status !== 200) {
            throw new Error(body.error);
          }
          setDownloadLoader(false);
          setDownloadResolutions(body.resolutions);
        })
        .catch(error => {
          setDownloadModal(false);
          setDownloadLoader(false);
          window.alert(error.message);
        });
    } else {
      // avoid reloading resolutions if already done once for the video
      setDownloadModal(true);
    }
  }

  /**
  * Handle the download of a YouTube video based on the selected resolution.
  *
  * This function is triggered by clicking the download button on the download 
  * modal. It checks if a resolution is selected and fetches the download URL
  * from the server. If the URL is successfully retrieved, it creates a link
  * element to initiate the download of the video as a file attachment.
  */
  const downloadVideo = async (e) => {
    e.preventDefault();

    if (selectedResolution === "") {
       // throw warning if no resolution is selcted
      window.alert("Please select a resolution!");
    } else {
      fetch(PROXY_URL + `/api/get-download?video_id=${videoId}&video_resolution=${selectedResolution}`)
      .then(response => response.json()
      .then(data => ({ status: response.status, body: data })))
      .then(({ status, body }) => {
        if (status === 504) {
          throw new Error('The downloader is currently down. Please try again later.');
        } else if (status !== 200) {
          throw new Error(body.error);
        }

        // create request to stream the download to the user with the download URL
        const requestUrl = PROXY_URL + '/api/download-video';
        const params = {
          download_url: body.download_url,
          video_title: videoTitle,
          video_resolution: body.video_resolution
        };
        const queryString = Object.keys(params).map(key => key + '=' + encodeURIComponent(params[key])).join('&');
        const videoResolution = body.videoResolution;
        
        fetch(`${requestUrl}?${queryString}`)
          .then(downloadResponse => downloadResponse.json()
          .then(downloadData => ({ downloadStatus: downloadResponse.status, downloadBody: downloadData })))
          .then(({ downloadStatus, downloadBody }) => {
            if (downloadStatus === 504) {
              throw new Error('The downloader is currently down. Please try again later.');
            } else if (downloadStatus !== 200) {
                throw new Error(downloadBody.error);
            }
            const preSignedUrl = downloadBody.pre_signed_url;

            // Create a temporary anchor element to trigger the download
            const link = document.createElement('a');
            link.href = preSignedUrl;
            link.download = `${videoTitle} [${videoResolution}].mp4`;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
          })
          .catch(error => {
            window.alert(error.message);
          });
      })
      .catch(error => {
        setDownloadModal(false);
        window.alert(error.message);
      });
    }
  }

  return (
    <div className="app">
      <div className="app-main">
        <div className="logo-title">
          <img className="app-logo" src={process.env.PUBLIC_URL + '/logo512.png'} alt="YT Rehashed Logo"></img>
          <h1>YT Rehashed</h1>
        </div>
        <h3>Enter the link to summarize your YouTube video:</h3>
        <div className="link-form">
          <input
            className="input-box"
            type="text"
            value={inputLink}
            placeholder="https://www.youtube.com/watch?v="
            onChange={(e) => setLink(e.target.value)}>
          </input>
          <button className="submit-button" onClick={generateSummaries}>Summarize</button>
        </div>

        {summaryLoader && (
          <div className="loader"></div>
        )}

        {transcriptSummary && (
          <div className="result">
            <section className="main-box-outer">
              <h2 className="section-title" id="download-title">Original Video
                <button className="download-button" onClick={displayResolutions}>
                  <img className="download-icon" src="download.svg" alt="Download"></img>
                </button>
              </h2>
              <div className="main-box-inner video-box">
                <iframe
                  className="video-player"
                  title="YouTube Video Player" 
                  src={"https://www.youtube.com/embed/" + videoId}
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen">
                </iframe>
              </div>
            </section>

            <section className="main-box-outer">
              <h2 className="section-title">Video Summary</h2>
              <div className="main-box-inner text-box">
                <p className="summary">{transcriptSummary}</p>
              </div>
            </section>
          </div>
        )}

        {commentSummary && (
          <div className="result">
            <section className="main-box-outer">
              <h2 className="section-title">Popular Comments</h2>
              <div className="main-box-inner comment-box">
                <ul className="comment-list">
                  {comments.map((comment) => (
                    <li key={comment.cid} className="comment-item">
                      <img className="comment-profile" src={comment.photo} alt={comment.author}></img>
                      <div className="comment-main">
                        <p className="comment-header">
                          <strong>{comment.author}</strong>
                          <small>{comment.time}</small></p>
                        <p className="comment-text">{comment.text.trim()}</p>
                        <div className="comment-likes">
                          <img src={process.env.PUBLIC_URL + '/thumbs-up.svg'} alt={"Like Button"}></img>
                          <small className="comment-like-count">{comment.votes}</small>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            </section>

            <section className="main-box-outer">
              <h2 className="section-title">Comments Summary</h2>
              <div className="main-box-inner text-box">
                <p className="summary">{commentSummary}</p>
              </div>
            </section>
          </div>
        )}

        {downloadModal && (
          <div>
            <div className="modal active" id="modal">
              <button className="close-button" onClick={ () => {setDownloadModal(false)} }>&times;</button>
              <div>
              {downloadLoader ? (
                  <div id="download-loader" className="loader"></div>
                ): (
                  <div>
                    {downloadResolutions && downloadResolutions.length > 0 ? (
                      <div id="download-result">
                        <div className="modal-header">
                          <h4 className="modal-title">Select a resolution to download:</h4>
                        </div>
                        <ul className="resolution-buttons">
                          {downloadResolutions.map((resolution, index) => (
                            <li key={index}>
                              <input 
                                type="radio"
                                id={resolution}
                                value={resolution}
                                checked={resolution === selectedResolution}
                                onChange={ (e) => {setSelectedResolution(e.target.value)} }
                                name="options"/>
                                <label htmlFor={resolution}>{resolution}</label>
                            </li>
                          ))}
                        </ul>
                        <button className="submit-button" onClick={downloadVideo}>
                          <p className="download-text">Download Video</p>
                          <img className="download-icon-large inverted-icon" src="download.svg" alt="Download"></img>
                        </button>
                      </div>
                    ) : (
                      <h3>No downloads available.</h3>
                    )
                    }
                  </div>
                )}
            </div>
          </div>
          <div id="overlay"></div>
        </div>
        )}

      </div>
    </div>
  );
}

export default App;